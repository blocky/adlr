// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	adlr "github.com/blocky/adlr"
	mock "github.com/stretchr/testify/mock"
)

// Locker is an autogenerated mock type for the Locker type
type Locker struct {
	mock.Mock
}

// LockNew provides a mock function with given fields: _a0
func (_m *Locker) LockNew(_a0 []adlr.DependencyLock) []adlr.DependencyLock {
	ret := _m.Called(_a0)

	var r0 []adlr.DependencyLock
	if rf, ok := ret.Get(0).(func([]adlr.DependencyLock) []adlr.DependencyLock); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]adlr.DependencyLock)
		}
	}

	return r0
}

// LockNewWithOld provides a mock function with given fields: new, old
func (_m *Locker) LockNewWithOld(new map[string]adlr.DependencyLock, old map[string]adlr.DependencyLock) []adlr.DependencyLock {
	ret := _m.Called(new, old)

	var r0 []adlr.DependencyLock
	if rf, ok := ret.Get(0).(func(map[string]adlr.DependencyLock, map[string]adlr.DependencyLock) []adlr.DependencyLock); ok {
		r0 = rf(new, old)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]adlr.DependencyLock)
		}
	}

	return r0
}

// VetLocks provides a mock function with given fields: _a0
func (_m *Locker) VetLocks(_a0 []adlr.DependencyLock) []adlr.LockerError {
	ret := _m.Called(_a0)

	var r0 []adlr.LockerError
	if rf, ok := ret.Get(0).(func([]adlr.DependencyLock) []adlr.LockerError); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]adlr.LockerError)
		}
	}

	return r0
}
