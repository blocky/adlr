// Code generated by mockery v2.40.2. DO NOT EDIT.

package mocks

import (
	ascertain "github.com/blocky/adlr/pkg/ascertain"
	mock "github.com/stretchr/testify/mock"
)

// Locker is an autogenerated mock type for the Locker type
type Locker struct {
	mock.Mock
}

// LockNew provides a mock function with given fields: _a0
func (_m *Locker) LockNew(_a0 ...ascertain.DependencyLock) []ascertain.DependencyLock {
	_va := make([]interface{}, len(_a0))
	for _i := range _a0 {
		_va[_i] = _a0[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for LockNew")
	}

	var r0 []ascertain.DependencyLock
	if rf, ok := ret.Get(0).(func(...ascertain.DependencyLock) []ascertain.DependencyLock); ok {
		r0 = rf(_a0...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]ascertain.DependencyLock)
		}
	}

	return r0
}

// LockNewWithOld provides a mock function with given fields: new, old
func (_m *Locker) LockNewWithOld(new map[string]ascertain.DependencyLock, old map[string]ascertain.DependencyLock) []ascertain.DependencyLock {
	ret := _m.Called(new, old)

	if len(ret) == 0 {
		panic("no return value specified for LockNewWithOld")
	}

	var r0 []ascertain.DependencyLock
	if rf, ok := ret.Get(0).(func(map[string]ascertain.DependencyLock, map[string]ascertain.DependencyLock) []ascertain.DependencyLock); ok {
		r0 = rf(new, old)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]ascertain.DependencyLock)
		}
	}

	return r0
}

// VetLocks provides a mock function with given fields: _a0
func (_m *Locker) VetLocks(_a0 ...ascertain.DependencyLock) []ascertain.LockerError {
	_va := make([]interface{}, len(_a0))
	for _i := range _a0 {
		_va[_i] = _a0[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for VetLocks")
	}

	var r0 []ascertain.LockerError
	if rf, ok := ret.Get(0).(func(...ascertain.DependencyLock) []ascertain.LockerError); ok {
		r0 = rf(_a0...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]ascertain.LockerError)
		}
	}

	return r0
}

// NewLocker creates a new instance of Locker. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewLocker(t interface {
	mock.TestingT
	Cleanup(func())
}) *Locker {
	mock := &Locker{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
