// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	internal "github.com/blocky/adlr/internal"
	mock "github.com/stretchr/testify/mock"
)

// Locker is an autogenerated mock type for the Locker type
type Locker struct {
	mock.Mock
}

// LockNew provides a mock function with given fields: _a0
func (_m *Locker) LockNew(_a0 ...internal.DependencyLock) []internal.DependencyLock {
	_va := make([]interface{}, len(_a0))
	for _i := range _a0 {
		_va[_i] = _a0[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 []internal.DependencyLock
	if rf, ok := ret.Get(0).(func(...internal.DependencyLock) []internal.DependencyLock); ok {
		r0 = rf(_a0...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]internal.DependencyLock)
		}
	}

	return r0
}

// LockNewWithOld provides a mock function with given fields: new, old
func (_m *Locker) LockNewWithOld(new map[string]internal.DependencyLock, old map[string]internal.DependencyLock) []internal.DependencyLock {
	ret := _m.Called(new, old)

	var r0 []internal.DependencyLock
	if rf, ok := ret.Get(0).(func(map[string]internal.DependencyLock, map[string]internal.DependencyLock) []internal.DependencyLock); ok {
		r0 = rf(new, old)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]internal.DependencyLock)
		}
	}

	return r0
}

// VetLocks provides a mock function with given fields: _a0
func (_m *Locker) VetLocks(_a0 ...internal.DependencyLock) []internal.LockerError {
	_va := make([]interface{}, len(_a0))
	for _i := range _a0 {
		_va[_i] = _a0[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 []internal.LockerError
	if rf, ok := ret.Get(0).(func(...internal.DependencyLock) []internal.LockerError); ok {
		r0 = rf(_a0...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]internal.LockerError)
		}
	}

	return r0
}
